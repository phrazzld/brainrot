#!/bin/bash
# Pre-commit hook to prevent secrets from being committed
# Install: cp .githooks/pre-commit .git/hooks/pre-commit && chmod +x .git/hooks/pre-commit

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "🔍 Scanning for secrets..."

# Check for common secret patterns in staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    exit 0
fi

# Patterns to check (excluding .env.example and docs)
PATTERNS=(
    "vercel_blob_[a-zA-Z0-9]{32,}"
    "sk-[a-zA-Z0-9]{20,}"
    "lulu_[a-zA-Z0-9]{20,}"
    "sk-or-[a-zA-Z0-9]{48}"
    "sk-ant-[a-zA-Z0-9]{40,}"
    "re_[a-zA-Z0-9]{20,}"
    "api_key"
    "apikey"
    "api_secret"
    "access_token"
    "private_key"
    "BEGIN RSA PRIVATE KEY"
    "BEGIN OPENSSH PRIVATE KEY"
    "BEGIN DSA PRIVATE KEY"
    "BEGIN EC PRIVATE KEY"
    "BEGIN PGP PRIVATE KEY"
)

FOUND_SECRETS=0

for FILE in $STAGED_FILES; do
    # Skip allowed files
    if [[ "$FILE" == ".env.example" ]] || \
       [[ "$FILE" == "docs/SECRETS.md" ]] || \
       [[ "$FILE" == ".gitleaks.toml" ]] || \
       [[ "$FILE" == ".github/secret_scanning.yml" ]] || \
       [[ "$FILE" == *.test.ts ]] || \
       [[ "$FILE" == *.test.js ]]; then
        continue
    fi
    
    # Check each pattern
    for PATTERN in "${PATTERNS[@]}"; do
        if git diff --cached "$FILE" | grep -qE "$PATTERN"; then
            echo -e "${RED}❌ Potential secret found in $FILE${NC}"
            echo -e "${YELLOW}   Pattern matched: $PATTERN${NC}"
            FOUND_SECRETS=$((FOUND_SECRETS + 1))
        fi
    done
    
    # Check for hardcoded environment variables
    if git diff --cached "$FILE" | grep -qE "process\.env\.[A-Z_]+\s*=\s*[\"'][^\"']+[\"']"; then
        echo -e "${RED}❌ Hardcoded environment variable found in $FILE${NC}"
        FOUND_SECRETS=$((FOUND_SECRETS + 1))
    fi
done

# Check for .env.local or other sensitive files
FORBIDDEN_FILES=(
    ".env.local"
    ".env.production"
    ".env.development"
    "*.pem"
    "*.key"
    "*.p12"
    "*.pfx"
    "id_rsa"
    "id_dsa"
    "id_ecdsa"
    "id_ed25519"
)

for FILE in $STAGED_FILES; do
    for FORBIDDEN in "${FORBIDDEN_FILES[@]}"; do
        if [[ "$FILE" == $FORBIDDEN ]]; then
            echo -e "${RED}❌ Sensitive file being committed: $FILE${NC}"
            echo -e "${YELLOW}   This file should be in .gitignore${NC}"
            FOUND_SECRETS=$((FOUND_SECRETS + 1))
        fi
    done
done

if [ $FOUND_SECRETS -gt 0 ]; then
    echo -e "\n${RED}⚠️  $FOUND_SECRETS potential secret(s) detected!${NC}"
    echo -e "${YELLOW}Please review your changes and remove any secrets.${NC}"
    echo -e "${YELLOW}If this is a false positive, you can bypass with: git commit --no-verify${NC}"
    exit 1
fi

echo -e "${GREEN}✅ No secrets detected${NC}"

# Optional: Run gitleaks if installed
if command -v gitleaks &> /dev/null; then
    echo "🔍 Running gitleaks scan..."
    gitleaks protect --staged --redact -v
    if [ $? -ne 0 ]; then
        echo -e "${RED}❌ Gitleaks found potential secrets${NC}"
        echo -e "${YELLOW}Review the findings above or bypass with: git commit --no-verify${NC}"
        exit 1
    fi
    echo -e "${GREEN}✅ Gitleaks scan passed${NC}"
fi

exit 0