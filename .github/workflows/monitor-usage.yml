name: Monitor API Usage

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      verbose:
        description: 'Verbose output'
        required: false
        default: 'false'

jobs:
  monitor:
    name: Check API Usage
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.1
          
      - name: Get pnpm store
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run usage monitoring
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          BLOB_READ_WRITE_TOKEN: ${{ secrets.BLOB_READ_WRITE_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          LULU_API_KEY: ${{ secrets.LULU_API_KEY }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          pnpm tsx scripts/monitor-api-usage.ts
          
      - name: Upload monitoring reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: usage-reports
          path: |
            monitoring/api-usage.json
            monitoring/alerts.json
          retention-days: 30
          
      - name: Check for alerts
        id: check-alerts
        run: |
          if [ -f monitoring/alerts.json ]; then
            ALERT_COUNT=$(jq '. | length' monitoring/alerts.json)
            if [ "$ALERT_COUNT" -gt 0 ]; then
              echo "has_alerts=true" >> $GITHUB_OUTPUT
              echo "⚠️ Found $ALERT_COUNT alerts"
            fi
          fi
          
      - name: Create issue for alerts
        if: steps.check-alerts.outputs.has_alerts == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const alerts = JSON.parse(fs.readFileSync('monitoring/alerts.json', 'utf8'));
            const latestAlert = alerts[alerts.length - 1];
            
            const issueBody = `
            ## 🚨 API Usage Alerts
            
            **Time:** ${latestAlert.timestamp}
            
            ### Alerts:
            ${latestAlert.alerts.map(a => `- ${a}`).join('\n')}
            
            ### Action Required:
            - Review the usage patterns
            - Check for potential security issues
            - Rotate secrets if necessary
            
            [View full report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 API Usage Alert - ' + new Date().toISOString().split('T')[0],
              body: issueBody,
              labels: ['security', 'monitoring', 'urgent']
            });